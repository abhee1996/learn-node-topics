//  // // // // // // /// // //////
//                               //
//    Node-js Module Wrapper     //
//    ======================     //
//                               //
// // // // // // // // // // // //


module wrapper function is a () round-bracket function 

// In nodejs,the code looks like following we write:
const fs = require("fs");
const myName = "abdullah";
console.log(myName);
// but behind of it in NodeJs it converted into

(function (exports, require, module, __filename, __dirname) {
  // Module code actually lives in here
  const fs = require("fs"); //actually require is comes like this way

  const myName = "abdullah";
  console.log(myName);
});


//Immidiately Invoked Function Expression
(function(){
const myName = "abdullah";
console.log(myName);
})();

By doing this, Node.js achieves a few things:

    It keeps top-level variables (defined with var, const or let) scoped to the module rather than the global object.
    It helps to provide some global-looking variables that are actually specific to the module, such as:
        The module and exports objects that the implementor can use to export values from the module.
        The convenience variables __filename and __dirname, containing the module's absolute filename and directory path.